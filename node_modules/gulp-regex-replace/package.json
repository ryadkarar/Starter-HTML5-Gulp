{
  "name": "gulp-regex-replace",
  "version": "0.2.3",
  "description": "Replace your code using regular expressions.",
  "keywords": [
    "gulpplugin",
    "gulp-regex-replace",
    "gulp",
    "regex",
    "replace",
    "preprocessor",
    "obfuscate"
  ],
  "homepage": "http://github.com/mikrofusion/gulp-regex-replace",
  "author": {
    "name": "Mike Groseclose",
    "email": "mikegroseclose@gmail.com"
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/mikrofusion/gulp-regex-replace.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "engines": {
    "node": ">=0.9.0"
  },
  "dependencies": {
    "through2": "~0.4.1",
    "gulp-util": "~2.2.14"
  },
  "devDependencies": {
    "mocha": "~1.18.2",
    "event-stream": "~3.1.0",
    "should": "~3.3.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/mikrofusion/gulp-regex-replace/raw/master/LICENSE"
    }
  ],
  "readme": "# gulp-regex-replace [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url]\n\n> [gulp](http://gulpjs.com) plugin to replace your code using regular expressions.\n\n## Install\n\n```bash\n$ npm install --save-dev gulp-regex-replace\n```\n\n## Usage\n\n```js\nvar gulp = require('gulp');\nvar replace = require('gulp-regex-replace');\n\ngulp.task('default', function () {\n\treturn gulp.src('test.js')\n\t\t.pipe(replace({regex:'Lorem', replace:'DeLorean'}));\n});\n```\n\n## Example\n\nTo see how gulp-regex-replace is being used in other projects checkout [gulp-obfuscate](https://github.com/mikrofusion/gulp-obfuscate).\n\n## API\n\n### replace(options)\n\n#### options.regex\n\nType: `String`, `Array of Strings`, or `Key/value with 'include' and 'exclude' as keys`\n\nDefault: ` `\n\nValues: `word`, `__v_[_A-Za-z0-9]+__`, `.(abc).`, `[ 'var(.*?;)', '([a-zA-Z_$]+)[, =;]' ]`, `...`\n\nThe regular expresion (or array of regular expressions) used to match words to be\nreplaced.  If an array is provided then the string to be replaced will be the cumulative\nresult of the regular expressions.\n\nIf the regular expression contains groups (denoted by a value within parenthesis)\nthen only the groups will be replaced rather than the entire matching string.\n\nRegex may also be key value pairs 'include' and 'exclude' indicating the regular expression matches to\ninclude or exclude.  e.g. `{ include: '([a-zA-Z0-9_$]+)[, =;]', exclude: '=[ ]*?([a-zA-Z0-9_$]+)[, =;]' }`\nwill replace `abc` in `var abc` but exclude `def` in `var abc = def`.\n\n#### options.replace\n\nType: `String` or `Method`\n\nDefault: `''`\n\nValues: `DeLorean`, `Lorem`, `function(match) { return 'DeLorean'; }`, `...`\n\nThe replace string or method.\n\nIf a method is given then the result of that method will be the replace string.\nThe input to that method will be the string matching the regular expression.\n\n#### options.exclude\n\nType: `String` or `Array of Strings`\n\nThis is a single or array of regular expression strings which will override the default logic and\nprevent matching strings from being replaced.\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT) Â© Mike Groseclose\n\n[npm-url]: https://npmjs.org/package/gulp-regex-replace\n[npm-image]: https://badge.fury.io/js/gulp-regex-replace.png\n\n[travis-url]: http://travis-ci.org/mikrofusion/gulp-regex-replace\n[travis-image]: https://secure.travis-ci.org/mikrofusion/gulp-regex-replace.png?branch=master\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mikrofusion/gulp-regex-replace/issues"
  },
  "_id": "gulp-regex-replace@0.2.3",
  "_shasum": "b603ffd5391b47cfda86126a6d6eef95b2ff8195",
  "_from": "gulp-regex-replace@",
  "_resolved": "https://registry.npmjs.org/gulp-regex-replace/-/gulp-regex-replace-0.2.3.tgz"
}
